name: WordPress WPScan (Two Sites, Shared Secrets)

on:
  push:
    branches:
      - main

jobs:
  wpscan:
    runs-on: ubuntu-latest

    env:
      # — Use the same existing secrets for BOTH Site 1 and Site 2 —
      DB_PASSWORD:     ${{ secrets.FOFIU_FLORIN_GEORGE_DB_PASS }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.FOFIU_FLORIN_GEORGE_DB_PASS }}

      WP_ADMIN_USER:     ${{ secrets.FOFIU_FLORIN_GEORGE_WP_ADMIN_USER }}
      WP_ADMIN_PASSWORD: ${{ secrets.FOFIU_FLORIN_GEORGE_WP_ADMIN_PASSWORD }}
      WP_ADMIN_EMAIL:    ${{ secrets.FOFIU_FLORIN_GEORGE_WP_ADMIN_EMAIL }}

      WPSCAN_API_TOKEN:  ${{ secrets.FOFIU_FLORIN_GEORGE_WPSCAN_API_TOKEN }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start both WordPress + MySQL stacks
        working-directory: .
        run: |
          # Launch db1/wordpress1 (8080) and db2/wordpress2 (8081)
          docker-compose up -d

          echo "→ Currently running containers:"
          docker-compose ps

          # ————— Wait for MySQL in db1 —————
          DB1_CONTAINER=$(docker-compose ps -q db1)
          echo "→ Waiting for MySQL (db1) in container $DB1_CONTAINER …"
          for i in {1..60}; do
            if docker exec "$DB1_CONTAINER" \
                 mysqladmin ping -u root -p"${MYSQL_ROOT_PASSWORD}" --silent; then
              echo "✔️  MySQL (db1) is up."
              break
            fi
            echo "  → db1 not ready (attempt $i/60), retrying in 5s…"
            sleep 5
          done

          if ! docker exec "$DB1_CONTAINER" \
                      mysqladmin ping -u root -p"${MYSQL_ROOT_PASSWORD}" --silent; then
            echo "❌ MySQL (db1) did not become ready in time."
            docker-compose logs db1 || true
            exit 1
          fi

          # ————— Wait for MySQL in db2 —————
          DB2_CONTAINER=$(docker-compose ps -q db2)
          echo "→ Waiting for MySQL (db2) in container $DB2_CONTAINER …"
          for i in {1..60}; do
            if docker exec "$DB2_CONTAINER" \
                 mysqladmin ping -u root -p"${MYSQL_ROOT_PASSWORD}" --silent; then
              echo "✔️  MySQL (db2) is up."
              break
            fi
            echo "  → db2 not ready (attempt $i/60), retrying in 5s…"
            sleep 5
          done

          if ! docker exec "$DB2_CONTAINER" \
                      mysqladmin ping -u root -p"${MYSQL_ROOT_PASSWORD}" --silent; then
            echo "❌ MySQL (db2) did not become ready in time."
            docker-compose logs db2 || true
            exit 1
          fi

          # ————— Wait for wordpress1 (port 8080) —————
          echo "→ Waiting for WordPress1 at http://localhost:8080 to return HTTP/200 …"
          for i in {1..30}; do
            if curl -sSf http://localhost:8080 >/dev/null; then
              echo "✔️  WordPress1 is up."
              break
            fi
            echo "  → WordPress1 not serving yet (attempt $i/30), retrying in 5s…"
            sleep 5
          done

          if ! curl -sSf http://localhost:8080 >/dev/null; then
            echo "❌ WordPress1 did not serve HTTP/200 in time."
            docker-compose logs wordpress1 || true
            exit 1
          fi

          # ————— Wait for wordpress2 (port 8081) —————
          echo "→ Waiting for WordPress2 at http://localhost:8081 to return HTTP/200 …"
          for i in {1..30}; do
            if curl -sSf http://localhost:8081 >/dev/null; then
              echo "✔️  WordPress2 is up."
              break
            fi
            echo "  → WordPress2 not serving yet (attempt $i/30), retrying in 5s…"
            sleep 5
          done

          if ! curl -sSf http://localhost:8081 >/dev/null; then
            echo "❌ WordPress2 did not serve HTTP/200 in time."
            docker-compose logs wordpress2 || true
            exit 1
          fi

      - name: Install WP-CLI in both WordPress containers
        run: |
          echo "→ Installing WP-CLI inside wordpress1 …"
          docker-compose exec -T wordpress1 bash -lc "\
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && \
            chmod +x wp-cli.phar && \
            mv wp-cli.phar /usr/local/bin/wp && \
            wp --info \
          "
          echo "✔️ WP-CLI is now installed in wordpress1."

          echo "→ Installing WP-CLI inside wordpress2 …"
          docker-compose exec -T wordpress2 bash -lc "\
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && \
            chmod +x wp-cli.phar && \
            mv wp-cli.phar /usr/local/bin/wp && \
            wp --info \
          "
          echo "✔️ WP-CLI is now installed in wordpress2."

      - name: Install WordPress core on both sites
        run: |
          echo "→ Running wp core install on wordpress1 …"
          docker-compose exec -T wordpress1 bash -lc "\
            wp core install \
              --url=http://localhost:8080 \
              --title='Test Site 1' \
              --admin_user='${WP_ADMIN_USER}' \
              --admin_password='${WP_ADMIN_PASSWORD}' \
              --admin_email='${WP_ADMIN_EMAIL}' \
              --allow-root \
          "
          echo "✔️ WordPress1 installed (admin: ${WP_ADMIN_USER})."

          echo "→ Running wp core install on wordpress2 …"
          docker-compose exec -T wordpress2 bash -lc "\
            wp core install \
              --url=http://localhost:8081 \
              --title='Test Site 2' \
              --admin_user='${WP_ADMIN_USER}' \
              --admin_password='${WP_ADMIN_PASSWORD}' \
              --admin_email='${WP_ADMIN_EMAIL}' \
              --allow-root \
          "
          echo "✔️ WordPress2 installed (admin: ${WP_ADMIN_USER})."

      - name: (Optional) Verify both front-ends again
        run: |
          echo "→ Verifying WordPress1 (http://localhost:8080) …"
          if curl -sSf http://localhost:8080 >/dev/null; then
            echo "✔️ WordPress1 front-end OK."
          else
            echo "❌ WordPress1 not serving after install—dumping logs:"
            docker-compose logs wordpress1 || true
            exit 1
          fi

          echo "→ Verifying WordPress2 (http://localhost:8081) …"
          if curl -sSf http://localhost:8081 >/dev/null; then
            echo "✔️ WordPress2 front-end OK."
          else
            echo "❌ WordPress2 not serving after install—dumping logs:"
            docker-compose logs wordpress2 || true
            exit 1
          fi

      - name: Install vulnerable plugins on each site
        run: |
          echo "→ Installing Contact Form 7 v3.5 on wordpress1 …"
          docker-compose exec -T wordpress1 bash -lc "\
            wp plugin install contact-form-7 --version=3.5 --activate --allow-root \
          "
          echo "✔️ Installed Contact Form 7 v3.5 on wordpress1."

          echo "→ Installing RevSlider v4.5.0 on wordpress2 …"
          docker-compose exec -T wordpress2 bash -lc "\
            wp plugin install revslider --version=4.5.0 --activate --allow-root \
          "
          echo "✔️ Installed RevSlider v4.5.0 on wordpress2."

      - name: Run WPScan against both sites
        run: |
          echo "→ Running WPScan on Site 1 (http://localhost:8080) …"
          WP1_CONTAINER=$(docker-compose ps -q wordpress1)
          docker run --rm \
            --network "container:$WP1_CONTAINER" \
            -e WPSCAN_API_TOKEN="${WPSCAN_API_TOKEN}" \
            wpscanteam/wpscan:latest \
              --url http://localhost:8080 \
              --api-token "${WPSCAN_API_TOKEN}" \
              --enumerate ap,at,u \
              --disable-tls-checks || true

          echo
          echo "→ Running WPScan on Site 2 (http://localhost:8081) …"
          WP2_CONTAINER=$(docker-compose ps -q wordpress2)
          docker run --rm \
            --network "container:$WP2_CONTAINER" \
            -e WPSCAN_API_TOKEN="${WPSCAN_API_TOKEN}" \
            wpscanteam/wpscan:latest \
              --url http://localhost:8081 \
              --api-token "${WPSCAN_API_TOKEN}" \
              --enumerate ap,at,u \
              --disable-tls-checks || true

      - name: Tear down both Docker stacks
        if: ${{ always() }}
        run: |
          docker-compose down --volumes
          echo "✔️ Cleanup complete."

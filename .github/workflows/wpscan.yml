name: WordPress WPScan

on:
  push:
    branches:
      - main

jobs:
  wpscan:
    runs-on: ubuntu-latest

    env:
      # MySQL credentials (for docker-compose)
      DB_PASSWORD: ${{ secrets.FOFIU_FLORIN_GEORGE_DB_PASS }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.FOFIU_FLORIN_GEORGE_DB_PASS }}

      # WP-CLI install credentials
      WP_ADMIN_USER: ${{ secrets.FOFIU_FLORIN_GEORGE_WP_ADMIN_USER }}
      WP_ADMIN_PASSWORD: ${{ secrets.FOFIU_FLORIN_GEORGE_WP_ADMIN_PASSWORD }}
      WP_ADMIN_EMAIL: ${{ secrets.FOFIU_FLORIN_GEORGE_WP_ADMIN_EMAIL }}

      # WPScan API token
      WPSCAN_API_TOKEN: ${{ secrets.FOFIU_FLORIN_GEORGE_WPSCAN_API_TOKEN }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start WordPress + MySQL via Docker Compose
        working-directory: .
        run: |
          docker-compose up -d

          echo "Waiting for WordPress on http://localhost:8080 …"
          for i in {1..30}; do
            if curl -sSf http://localhost:8080 >/dev/null; then
              echo "✔️  WordPress HTTP 200 reached."
              break
            fi
            echo "  → Not ready yet (attempt $i/30), retrying in 5s…"
            sleep 5
          done

          if ! curl -sSf http://localhost:8080 >/dev/null; then
            echo "❌ WordPress did not become available in time."
            docker-compose logs wordpress || true
            exit 1
          fi

          # Now wait for MySQL itself to be accepting connections
          DB_CONTAINER=$(docker-compose ps -q db)
          echo "Waiting for MySQL to be ready inside container $DB_CONTAINER …"
          for i in {1..30}; do
            if docker exec "$DB_CONTAINER" \
                  mysqladmin ping -h localhost \
                  -u root -p"${MYSQL_ROOT_PASSWORD}" --silent; then
              echo "✔️  MySQL is up and accepting connections."
              break
            fi
            echo "  → MySQL not ready yet (attempt $i/30), retrying in 5s…"
            sleep 5
          done

          if ! docker exec "$DB_CONTAINER" \
                      mysqladmin ping -h localhost \
                      -u root -p"${MYSQL_ROOT_PASSWORD}" --silent; then
            echo "❌ MySQL did not become available in time."
            docker-compose logs db || true
            exit 1
          fi

      - name: Install WordPress core via WP-CLI
        run: |
          # Grab the running WordPress container ID
          WP_CONTAINER=$(docker-compose ps -q wordpress)

          # Run WP-CLI inside the same network namespace as the WP container
          docker run --rm \
            --volumes-from "$WP_CONTAINER" \
            --network "container:$WP_CONTAINER" \
            -e WORDPRESS_DB_HOST="db:3306" \
            -e WORDPRESS_DB_USER="wordpress" \
            -e WORDPRESS_DB_PASSWORD="${DB_PASSWORD}" \
            -e WORDPRESS_DB_NAME="wordpress" \
            wordpress:cli \
              wp core install \
                --url="http://localhost" \
                --title="Test Site" \
                --admin_user="${WP_ADMIN_USER}" \
                --admin_password="${WP_ADMIN_PASSWORD}" \
                --admin_email="${WP_ADMIN_EMAIL}" \
                --allow-root

          echo "✔️  WordPress installed (admin user: ${WP_ADMIN_USER})."

      - name: Install vulnerable plugin (Contact Form 7 v3.5)
        run: |
          WP_CONTAINER=$(docker-compose ps -q wordpress)

          docker run --rm \
            --volumes-from "$WP_CONTAINER" \
            --network "container:$WP_CONTAINER" \
            wordpress:cli \
              wp plugin install contact-form-7 --version=3.5 --activate --allow-root

          echo "✔️  Installed Contact Form 7 v3.5"

      - name: Run WPScan against the local site
        run: |
          WP_CONTAINER=$(docker-compose ps -q wordpress)

          docker run --rm \
            --network "container:$WP_CONTAINER" \
            -e WPSCAN_API_TOKEN="${WPSCAN_API_TOKEN}" \
            wpscanteam/wpscan:latest \
              --url http://localhost \
              --api-token "${WPSCAN_API_TOKEN}" \
              --enumerate ap,at,u \
              --disable-tls-checks

      - name: Tear down Docker Compose
        if: ${{ always() }}
        run: |
          docker-compose down --volumes

name: "WPScan Automation"

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DB_PASSWORD: ${{ secrets.Fofiu_Florin_George_DB_PASS }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.Fofiu_Florin_George_DB_PASS }}

jobs:
  wpscan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Verify Docker & Docker Compose
        run: |
          docker version
          docker compose version

      - name: Start WordPress + MySQL via Docker Compose
        run: |
          docker compose up -d

          # Give MySQL and WordPress a chance to finish their first‐run initialization.
          # (If needed, bump this to 90 or 120 seconds.)
          echo "⏳ Sleeping 60 seconds to let DB and WP finish setup…"
          sleep 60

          # Now do up to 15 more retries (every 5s) to see if WP is returning HTTP 200.
          # for i in {1..15}; do
          #   STATUS=$(
          #     curl --silent --output /dev/null \
          #         --write-out "%{http_code}" \
          #         http://localhost:8080 || echo "000"
          #   )
          #   if [ "$STATUS" -eq 200 ]; then
          #     echo "✅ WordPress is up!"
          #     break
          #   fi
          #   echo "⌛ Waiting for WordPress… ($i/15)"
          #   sleep 5
          # done

          # if [ "$STATUS" -ne 200 ]; then
          #   echo "::error::WordPress still not responding with 200 after timeout."
          #   exit 1
          fi
        env:
          DB_PASSWORD: ${{ secrets.Fofiu_Florin_George_DB_PASS }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.Fofiu_Florin_George_DB_PASS }}


      - name: Install WP-CLI & Vulnerable Plugin (Contact Form 7 5.9.4)
        run: |
          # Find the WordPress container (must be the official wordpress:latest image)
          WP_CONTAINER_ID=$(docker ps -qf "ancestor=wordpress:latest")
          if [ -z "$WP_CONTAINER_ID" ]; then
            echo "Error: WordPress container not found."
            exit 1
          fi

          # Install WP-CLI in the container
          docker exec "$WP_CONTAINER_ID" bash -lc "curl -sSL https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -o /usr/local/bin/wp && chmod +x /usr/local/bin/wp"

          # Use WP-CLI to install Contact Form 7 v5.9.4 (known vulnerabilities)
          docker exec "$WP_CONTAINER_ID" bash -lc "\
            wp --path=/var/www/html plugin install contact-form-7 --version=5.9.4 --activate --allow-root \
          "
        env:
          DB_PASSWORD: ${{ secrets.Fofiu_Florin_George_DB_PASS }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.Fofiu_Florin_George_DB_PASS }}

      - name: Pull WPScan Docker image
        run: docker pull wpscanteam/wpscan:latest

      - name: Run WPScan via Docker (aggressive plugin enumeration)
        run: |
          docker run --rm \
            --network=host \
            wpscanteam/wpscan:latest \
            --url http://host.docker.internal:8080 \
            --api-token "${{ secrets.Fofiu_Florin_George_WPSCAN_API_TOKEN }}" \
            --enumerate ap,at,u
        # -e ap = all plugins (active + inactive)
        # -e at = all themes
        # -e u  = user enumeration

      - name: Teardown Docker Compose
        if: always()
        run: docker compose down -v

name: WordPress WPScan

on:
  push:
    branches:
      - main

jobs:
  wpscan:
    runs-on: ubuntu-latest

    env:
      # MySQL credentials (for docker-compose)
      DB_PASSWORD: ${{ secrets.FOFIU_FLORIN_GEORGE_DB_PASS }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.FOFIU_FLORIN_GEORGE_DB_PASS }}

      # WP-CLI install credentials
      WP_ADMIN_USER: ${{ secrets.FOFIU_FLORIN_GEORGE_WP_ADMIN_USER }}
      WP_ADMIN_PASSWORD: ${{ secrets.FOFIU_FLORIN_GEORGE_WP_ADMIN_PASSWORD }}
      WP_ADMIN_EMAIL: ${{ secrets.FOFIU_FLORIN_GEORGE_WP_ADMIN_EMAIL }}

      # WPScan API token
      WPSCAN_API_TOKEN: ${{ secrets.FOFIU_FLORIN_GEORGE_WPSCAN_API_TOKEN }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start WordPress + MySQL via Docker Compose
        working-directory: .
        run: |
          docker-compose up -d

          # Show which containers are running, for debugging
          docker-compose ps

          # 1) Wait for MySQL to be fully ready
          DB_CONTAINER=$(docker-compose ps -q db)
          echo "→ Waiting for MySQL inside container $DB_CONTAINER …"
          for i in {1..60}; do
            if docker exec "$DB_CONTAINER" \
                 mysqladmin ping -u root -p"${MYSQL_ROOT_PASSWORD}" --silent; then
              echo "✔️  MySQL is up (responding to mysqladmin ping)."
              break
            fi
            echo "  → MySQL not ready (attempt $i/60), retrying in 5s…"
            sleep 5
          done

          if ! docker exec "$DB_CONTAINER" \
                      mysqladmin ping -u root -p"${MYSQL_ROOT_PASSWORD}" --silent; then
            echo "❌ MySQL did not become ready in time."
            docker-compose logs db || true
            exit 1
          fi

          # 2) Wait for WordPress+PHP to serve HTTP/200 on port 8080
          echo "→ Waiting for WordPress front-end on http://localhost:8080 …"
          for i in {1..30}; do
            if curl -sSf http://localhost:8080 >/dev/null; then
              echo "✔️  WordPress HTTP/200 reached."
              break
            fi
            echo "  → Not serving yet (attempt $i/30), retrying in 5s…"
            sleep 5
          done

          if ! curl -sSf http://localhost:8080 >/dev/null; then
            echo "❌ WordPress front-end did not serve HTTP/200 in time."
            docker-compose logs wordpress || true
            exit 1
          fi

      - name: Install WP-CLI inside the WordPress container
        run: |
          WP_CONTAINER=$(docker-compose ps -q wordpress)
          echo "→ Installing WP-CLI inside wordpress container ($WP_CONTAINER) …"

          # Using docker-compose exec -T to avoid TTY issues in Actions
          docker-compose exec -T wordpress bash -lc "\
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && \
            chmod +x wp-cli.phar && \
            mv wp-cli.phar /usr/local/bin/wp && \
            wp --info \
          "
          echo "✔️  WP-CLI is now installed inside the WordPress container."

      - name: Install WordPress core via WP-CLI
        run: |
          echo "→ Running wp core install…"

          # “docker-compose exec” will run inside the same network as 'db' because
          # docker-compose automatically attaches each service to a user-defined network.
          docker-compose exec -T wordpress bash -lc "\
            wp core install \
              --url=http://localhost \
              --title='Test Site' \
              --admin_user='${WP_ADMIN_USER}' \
              --admin_password='${WP_ADMIN_PASSWORD}' \
              --admin_email='${WP_ADMIN_EMAIL}' \
              --allow-root \
          "
          echo "✔️  WordPress installed (admin user: ${WP_ADMIN_USER})."

      - name: (Optional) Verify WordPress front-end again
        run: |
          echo "→ Verifying that WordPress still serves…"
          if curl -sSf http://localhost:8080 >/dev/null; then
            echo "✔️  WordPress front-end confirmed."
          else
            echo "❌ WordPress is not serving after install—dumping logs:"
            docker-compose logs wordpress || true
            exit 1
          fi

      - name: Install vulnerable plugin (Contact Form 7 v3.5)
        run: |
          echo "→ Installing Contact Form 7 v3.5 …"
          docker-compose exec -T wordpress bash -lc "\
            wp plugin install contact-form-7 --version=3.5 --activate --allow-root \
          "
          echo "✔️  Installed Contact Form 7 v3.5 (vulnerable)."

      - name: Run WPScan against the local site
        run: |
          echo "→ Running WPScan …"
          WP_CONTAINER=$(docker-compose ps -q wordpress)

          docker run --rm \
            --network "container:$WP_CONTAINER" \
            -e WPSCAN_API_TOKEN="${WPSCAN_API_TOKEN}" \
            wpscanteam/wpscan:latest \
              --url http://localhost \
              --api-token "${WPSCAN_API_TOKEN}" \
              --enumerate ap,at,u \
              --disable-tls-checks

      - name: Tear down Docker Compose
        if: ${{ always() }}
        run: |
          docker-compose down --volumes
          echo "✔️  Cleanup complete."

name: WordPress Setup (No Vulnerability Scan)

on:
  push:
    branches:
      - main

jobs:
  wordpress-setup:
    runs-on: ubuntu-latest

    env:
      # Reuse the same GitHub Secrets you already have:
      DB_PASSWORD:         ${{ secrets.FOFIU_FLORIN_GEORGE_DB_PASS }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.FOFIU_FLORIN_GEORGE_DB_PASS }}
      WP_ADMIN_USER:       ${{ secrets.FOFIU_FLORIN_GEORGE_WP_ADMIN_USER }}
      WP_ADMIN_PASSWORD:   ${{ secrets.FOFIU_FLORIN_GEORGE_WP_ADMIN_PASSWORD }}
      WP_ADMIN_EMAIL:      ${{ secrets.FOFIU_FLORIN_GEORGE_WP_ADMIN_EMAIL }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start WordPress + MySQL via Docker Compose
        working-directory: .
        run: |
          docker-compose up -d

          # Show running containers (for debug)
          docker-compose ps

          # 1) Wait until MySQL accepts connections
          DB_CONTAINER=$(docker-compose ps -q db)
          echo "→ Waiting for MySQL to be ready (container: $DB_CONTAINER)…"
          for i in {1..60}; do
            if docker exec "$DB_CONTAINER" \
                 mysqladmin ping -u root -p"${MYSQL_ROOT_PASSWORD}" --silent; then
              echo "✔️ MySQL is up and responding."
              break
            fi
            echo "  → MySQL not ready (attempt $i/60), retrying in 5s…"
            sleep 5
          done
          if ! docker exec "$DB_CONTAINER" \
                      mysqladmin ping -u root -p"${MYSQL_ROOT_PASSWORD}" --silent; then
            echo "❌ MySQL did not become ready in time."
            docker-compose logs db || true
            exit 1
          fi

          # 2) Wait until WordPress front‐end returns HTTP 200 on port 8080
          echo "→ Waiting for WordPress HTTP/200 at http://localhost:8080 …"
          for i in {1..30}; do
            if curl -sSf http://localhost:8080 >/dev/null; then
              echo "✔️ WordPress is serving HTTP 200."
              break
            fi
            echo "  → WordPress not serving yet (attempt $i/30), retrying in 5s…"
            sleep 5
          done
          if ! curl -sSf http://localhost:8080 >/dev/null; then
            echo "❌ WordPress front‐end did not serve HTTP 200 in time."
            docker-compose logs wordpress || true
            exit 1
          fi

      - name: Install WP-CLI inside the WordPress container
        run: |
          WP_CONTAINER=$(docker-compose ps -q wordpress)
          echo "→ Installing WP-CLI inside container $WP_CONTAINER …"
          docker-compose exec -T wordpress bash -lc "\
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && \
            chmod +x wp-cli.phar && \
            mv wp-cli.phar /usr/local/bin/wp && \
            wp --info \
          "
          echo "✔️ WP-CLI installed."

      - name: Install WordPress core via WP-CLI
        run: |
          echo "→ Running wp core install…"
          docker-compose exec -T wordpress bash -lc "\
            wp core install \
              --url=http://localhost \
              --title='Demo Site' \
              --admin_user='${WP_ADMIN_USER}' \
              --admin_password='${WP_ADMIN_PASSWORD}' \
              --admin_email='${WP_ADMIN_EMAIL}' \
              --allow-root \
          "
          echo "✔️ WordPress core installed (admin: ${WP_ADMIN_USER})."

      - name: (Optional) Verify WordPress front‐end again
        run: |
          echo "→ Verifying WordPress front‐end post-install…"
          if curl -sSf http://localhost:8080 >/dev/null; then
            echo "✔️ WordPress is still serving HTTP 200."
          else
            echo "❌ WordPress is not serving after install—dumping logs:"
            docker-compose logs wordpress || true
            exit 1
          fi

      - name: Install a benign plugin (Hello Dolly)
        run: |
          echo "→ Installing ‘hello-dolly’ plugin …"
          docker-compose exec -T wordpress bash -lc "\
            wp plugin install hello-dolly --activate --allow-root \
          "
          echo "✔️ ‘hello-dolly’ plugin installed and activated."

      - name: Final sanity check list installed plugins
        run: |
          echo "→ Listing installed plugins…"
          docker-compose exec -T wordpress bash -lc "\
            wp plugin list --allow-root \
          "

      - name: Tear down Docker Compose
        if: ${{ always() }}
        run: |
          docker-compose down --volumes
          echo "✔️ Cleanup complete."
